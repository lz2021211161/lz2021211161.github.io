<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Network-Linux</title>
    <link href="/2024/11/08/Network-Linux/"/>
    <url>/2024/11/08/Network-Linux/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux系统是如何收发网络包的？"><a href="#Linux系统是如何收发网络包的？" class="headerlink" title="Linux系统是如何收发网络包的？"></a>Linux系统是如何收发网络包的？</h1><h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><p>OSI网络模型共有七层，由国际标准化组织制定。但七层的分层过于复杂，故该模型一般只用于概念和理论，并没有实际的实现方案。</p><p>常见的分层模型为TCP&#x2F;IP网络模型，共包含四层，分别是应用层、传输层、网络层和网络接口层，Linux系统同样也采用了TCP&#x2F;IP网络模型来实现协议栈。</p><p>简要介绍一下TCP&#x2F;IP模型：</p><ul><li>应用层：负责向用户提供应用程序，如HTTP、DNS等</li><li>传输层：负责端到端的通信，如TCP、UDP等</li><li>网络层：负责网络包的封装、分片、路由、转发，如IP、ICMP等</li><li>网络接口层：负责网络包在物理网络中的传输，如网络包的封帧、MAC寻址、差错校验以及通过网卡传输帧等</li></ul><p>TCP&#x2F;IP模型和OSI模型间各层的对应关系如下图：</p><img src="/2024/11/08/Network-Linux/OSI%E4%B8%8ETCP.png" class="" title="img"><p>这里提一下常说的七层和四层负载均衡，指的是OSI七层模型中的应用层和传输层。</p><blockquote><p>负载均衡：通俗一点理解就是尽可能将网络流量平均分发到多个服务器上，以提高系统整体的响应速度和可用性。</p><p>可以分为两类：硬件负载均衡和软件负载均衡</p><ul><li><p>硬件负载均衡：一般是在定制的处理器上运行独立负载均衡服务器，问题就是贵</p></li><li><p>软件负载均衡：从软件层面实现负载均衡，比较常见的是OSI模型中四层和七层的负载均衡。</p><ul><li><p>七层负载均衡：根据访问用户的HTTP请求头、URL信息将请求转发到特定的主机</p><ul><li><p>DNS重定向</p><p>大型网站一般用DNS负载均衡作为第一级负载均衡手段，然后在内部使用其他方法做第二级负载均衡。</p><p>DNS，域名解析服务，设计为一个树形结构的分布式应用，自上而下依次为：根域名服务器，一级域名服务器，二级域名服务器…本地域名服务器。</p><p>DNS工作流程是一个逆向的递归流程，DNS客户端依次请求本地DNS服务器，上一级DNS服务器…根DNS服务器，一旦命中，再进行递归查询。为了减少查询次数，每一级DNS服务器都会设置DNS查询缓存。</p><p>DNS负载均衡的原理就是：基于DNS查询缓存，按照负载情况返回不同服务器的IP地址。</p><img src="/2024/11/08/Network-Linux/580a887aab6af82ab03d7f00cd319ef8.jpeg" class="" title="img"></li><li><p>HTTP重定向</p><p>原理：根据用户的HTTP请求计算出真实的服务器地址，将该服务器地址写入HTTP重定向响应中，返回给浏览器，由浏览器进行访问</p><img src="/2024/11/08/Network-Linux/a8c0240dadeb0500d70168a8720d2062.png" class="" title="img"></li><li><p>反向代理负载均衡</p><p>是指以代理服务器来接受网络请求，然后将请求转发给内网中的服务器，并将从内网服务器上得到的结果返回给网络请求的客户端。</p><p>正向代理：发生在客户端，是由用户主动发起的。翻墙软件是典型的正向代理，客户端通过主动访问代理服务器，让代理服务器获得需要的外网数据，然后转发回客户端。</p><p>反向代理：发生在服务端，用户请求时不知道代理的存在。</p><img src="/2024/11/08/Network-Linux/8cee5dc1a59ed7dda2507d3231435c4f.png" class="" title="img"><p>首先，在代理服务器上指定负载均衡规则。然后反向代理服务器会拦截指定域名或IP的请求，根据规则将请求分发到候选服务器上。要求候选服务器需要由容错机制（高可用方案），如主备模式，双主模式等</p></li></ul></li><li><p>四层负载均衡（基于IP地址和端口进行请求的转发）</p><ul><li><p>IP负载均衡</p><p>是在网络层修改请求目的地址实现负载均衡</p><img src="/2024/11/08/Network-Linux/3d77119f0badc8e410ab4762f6dc725a.png" class="" title="img"></li><li><p>MAC负载均衡</p><p>指通过修改mac地址实现负载均衡</p><img src="/2024/11/08/Network-Linux/c5a17700415024f2400fad5c33f08349.png" class="" title="img"></li></ul></li></ul></li></ul></blockquote><h2 id="Linux接收网络包的流程"><a href="#Linux接收网络包的流程" class="headerlink" title="Linux接收网络包的流程"></a>Linux接收网络包的流程</h2><p>网卡是计算机里的一个硬件，专门负责接收和发送网络包，当网卡接收到一个网络包后，会通过 DMA 技术，将网络包写入到指定的内存地址，也就是写入到 Ring Buffer ，这个是一个环形缓冲区，接着就会告诉操作系统这个网络包已经到达。</p><p>这个告诉操作系统的操作可以通过中断来实现，但在高性能网络场景下，可能会频繁触发中断，影响系统处理效率。</p><p>所以为了解决频繁中断带来的性能开销，Linux 内核在 2.6 版本中引入了 <strong>NAPI 机制</strong>，它是混合「中断和轮询」的方式来接收网络包，它的核心概念就是<strong>不采用中断的方式读取数据</strong>，而是首先采用中断唤醒数据接收的服务程序，然后 <code>poll</code> 的方法来轮询数据。</p><p>因此，当有网络包到达时，会通过 DMA 技术，将网络包写入到指定的内存地址，接着网卡向 CPU 发起硬件中断，当 CPU 收到硬件中断请求后，根据中断表，调用已经注册的中断处理函数。</p><p>硬件中断处理函数会做如下的事情：</p><ul><li>需要先「暂时屏蔽中断」，表示已经知道内存中有数据了，告诉网卡下次再收到数据包直接写内存就可以了，不要再通知 CPU 了，这样可以提高效率，避免 CPU 不停的被中断。</li><li>接着，发起「软中断」，然后恢复刚才屏蔽的中断。</li></ul><p>硬件中断处理函数做的事情很少，主要耗时的工作都交给软中断处理函数了。</p><p>内核中的 ksoftirqd 线程专门负责软中断的处理，当 ksoftirqd 内核线程收到软中断后，就会来轮询处理数据。</p><p>ksoftirqd 线程会从 Ring Buffer 中获取一个数据帧，用 sk_buff 表示，从而可以作为一个网络包交给网络协议栈进行逐层处理。</p><p>处理过程：</p><ol><li>网络接口层，会检查报文的合法性，若不合法则丢弃，合法会找到网络包的上层协议类型，如IPv4或IPv6，接着再去掉帧头和帧尾，交到网络层。</li><li>取出IP包，判断网络包下一步的走向，比如是交给上层处理还是转发出去。当确认这个网络包要发送给本机后，就会从 IP 头里看看上一层协议的类型是 TCP 还是 UDP，接着去掉 IP 头，然后交给传输层。</li><li>传输层，取出 TCP 头或 UDP 头，根据四元组「源 IP、源端口、目的 IP、目的端口」 作为标识，找出对应的 Socket，并把数据放到 Socket 的接收缓冲区。</li><li>Socket，应用层程序调用 Socket 接口，将内核的 Socket 接收缓冲区的数据「拷贝」到应用层的缓冲区，然后唤醒用户进程。</li></ol><p>可以从下图左边部分看到网络包接收的流程，右边部分刚好反过来，它是网络包发送的流程。</p><img src="/2024/11/08/Network-Linux/%E6%94%B6%E5%8F%91%E6%B5%81%E7%A8%8B.png" class="" title="img"><h2 id="Linux发送网络包的流程"><a href="#Linux发送网络包的流程" class="headerlink" title="Linux发送网络包的流程"></a>Linux发送网络包的流程</h2><p>整体流程可以见上图右侧，大概就是将接收流程反过来。</p><p>有一些需要注意的点：</p><ol><li><p>应用程序调用Socket发送数据包的接口时，由于是系统调用，会陷入内核态。内核会申请一个内核态的 sk_buff 内存，<strong>将用户待发送的数据拷贝到 sk_buff 内存，并将其加入到发送缓冲区</strong>。</p></li><li><p>若传输层使用TCP协议，则不能直接取出sk_buff，而是要先拷贝一个sk_buff副本。是因为当网卡发送完后，会将sk_buff释放，但TCP支持丢失重传，所以在收到ACK前，sk_buff的内容应该能读取。</p></li><li><p>当完成对整个数据包的封装后，会触发「软中断」告诉网卡驱动程序，这里有新的网络包需要发送，驱动程序会从发送队列中读取 sk_buff，将这个 sk_buff 挂到 RingBuffer 中，接着将 sk_buff 数据映射到网卡可访问的内存 DMA 区域，最后完成真实的发送。当发送完成的时候，网卡设备会触发一个硬中断来释放内存，主要是释放 sk_buff 内存和清理 RingBuffer 内存。最后，当收到这个 TCP 报文的 ACK 应答时，传输层就会释放原始的 sk_buff 。</p></li></ol><p>在发送网络数据的时候，涉及几次内存拷贝操作？</p><ol><li>调用发送数据的系统调用的时候，内核会申请一个内核态的 sk_buff 内存，将用户待发送的数据拷贝到 sk_buff 内存，并将其加入到发送缓冲区。</li><li>在使用 TCP 传输协议的情况下，从传输层进入网络层的时候，每一个 sk_buff 都会被克隆一个新的副本出来。副本 sk_buff 会被送往网络层，等它发送完的时候就会释放掉，然后原始的 sk_buff 还保留在传输层，目的是为了实现 TCP 的可靠传输，等收到这个数据包的 ACK 时，才会释放原始的 sk_buff 。</li><li>当 IP 层发现 sk_buff 大于 MTU 时才需要进行。会再申请额外的 sk_buff，并将原来的 sk_buff 拷贝为多个小的 sk_buff。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OS-Memory</title>
    <link href="/2024/11/06/OS-Memory/"/>
    <url>/2024/11/06/OS-Memory/</url>
    
    <content type="html"><![CDATA[<h1 id="操作系统——分级缓存体系"><a href="#操作系统——分级缓存体系" class="headerlink" title="操作系统——分级缓存体系"></a>操作系统——分级缓存体系</h1><h2 id="存储器的层次结构"><a href="#存储器的层次结构" class="headerlink" title="存储器的层次结构"></a>存储器的层次结构</h2><ol><li>寄存器</li><li>Cache</li><li>内存</li><li>硬盘</li></ol><p>一个形象的比喻：</p><p>把CPU比作人类的大脑，脑中在思考的东西，就类似于CPU中的<strong>寄存器</strong>，处理速度最快，但能存储的东西很少。</p><p>脑中的记忆就类似于CPU Cache（CPU高速缓存），处理速度相比寄存器慢了一点，但能够存储的数据比寄存器多。CPU Cache会分成L1、L2、L3三层，其中L1 Cache包括【数据缓存】和【指令缓存】。主要区分为L1的读写速度快于L2、L3，存储空间更小。可以类比于脑中的短期记忆，L2、L3更类似于中长期记忆。</p><p>以上是CPU内部的存储器，下面再说说CPU外部的存储器：</p><p>假设我们在阅读，桌子上的书籍就相当于内存（内容是数据），而书架上的书可以类比为硬盘。</p><p>我们从书架取书到桌子上，阅读，脑中记忆，思考的一整个流程就相似于从磁盘加载数据到内存，再到CPU的寄存器和Cache中，最后供CPU进行计算。</p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>最靠近CPU的控制单元和计算单元，读取速度最快，故价格也最贵</p><ul><li><p>32 位 CPU 中大多数寄存器可以存储 <code>4</code> 个字节；</p></li><li><p>64 位 CPU 中大多数寄存器可以存储 <code>8</code> 个字节。</p></li></ul><p>寄存器的访问速度非常快，一般要求在半个 CPU 时钟周期内完成读写（CPU时钟周期是CPU主频的倒数）</p><h2 id="CPU-Cache"><a href="#CPU-Cache" class="headerlink" title="CPU Cache"></a>CPU Cache</h2><p>CPU Cache 用的是一种叫 <strong>SRAM</strong>（<strong>Static Random-Access Memory，静态随机存储器</strong>）的芯片</p><blockquote><p>静态指当有电时可以保存数据，断电后数据会丢失</p></blockquote><p>CPU 的高速缓存，通常可以分为 L1、L2、L3 这样的三层高速缓存</p><ul><li>L1高速缓存</li></ul><p>L1 高速缓存的访问速度几乎和寄存器一样快，通常只需要 <code>2~4</code> 个时钟周期</p><p>每个 CPU 核心都有一块属于自己的 L1 高速缓存，指令和数据在 L1 是分开存放的，所以 L1 高速缓存通常分成<strong>指令缓存</strong>和<strong>数据缓存</strong>。</p><ul><li>L2高速缓存</li></ul><p>L2 高速缓存同样每个 CPU 核心都有，但是 L2 高速缓存位置比 L1高速缓存距离 CPU 核心更远，访问速度通常在 <code>10~20</code> 个时钟周期。</p><ul><li>L3高速缓存</li></ul><p>L3 高速缓存通常是多个 CPU 核心共用的，位置比 L2 高速缓存距离 CPU 核心更远，访问速度相对也比较慢一些，访问速度在 <code>20~60</code>个时钟周期。</p><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>内存使用的是 DRAM （<strong>Dynamic Random Access Memory，动态随机存取存储器</strong>）的芯片。相比 SRAM，DRAM 的密度更高，功耗更低，有更大的容量，而且造价比 SRAM 芯片便宜很多。</p><p>DRAM 存储一个 bit 数据，只需要一个晶体管和一个电容就能存储。但是因为数据会被存储在电容里，电容会不断漏电，所以需要「定时刷新」电容，才能保证数据不会被丢失，这就是 DRAM 之所以被称为「动态」存储器的原因，只有不断刷新，数据才能被存储起来。</p><p>DRAM 的数据访问电路和刷新电路都比 SRAM 更复杂，所以访问的速度会更慢，内存速度大概在 <code>200~300</code> 个 时钟周期之间。</p><h2 id="SSD-HDD-硬盘"><a href="#SSD-HDD-硬盘" class="headerlink" title="SSD&#x2F;HDD 硬盘"></a>SSD&#x2F;HDD 硬盘</h2><p>SSD（<em>Solid-state disk</em>） 就是我们常说的固体硬盘，结构和内存类似，但是它相比内存的优点是断电后数据还是存在的，而内存、寄存器、高速缓存断电后数据都会丢失。</p><p>机械硬盘（<em>Hard Disk Drive, HDD</em>），是通过物理读写的方式来访问数据的，访问速度很慢。</p><h2 id="CPU读写数据的方式"><a href="#CPU读写数据的方式" class="headerlink" title="CPU读写数据的方式"></a>CPU读写数据的方式</h2><p>CPU并不会直接和距离遥远的存储设备直接打交道，而是通过距离近的存储设备进行传递。</p><p>比如，CPU Cache 的数据是从内存加载过来的，写回数据的时候也只写回到内存，CPU Cache 不会直接把数据写到硬盘，也不会直接从硬盘加载数据，而是先加载到内存，再从内存加载到 CPU Cache 中。</p><p>访问数据也是同理，CPU会依次从访问速度快的存储设备查询到速度慢的存储设备。</p>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>learnMarkdown</title>
    <link href="/2024/09/26/learnMarkdown/"/>
    <url>/2024/09/26/learnMarkdown/</url>
    
    <content type="html"><![CDATA[<h1 id="第一篇博客，顺便学一下markdown语法"><a href="#第一篇博客，顺便学一下markdown语法" class="headerlink" title="第一篇博客，顺便学一下markdown语法"></a>第一篇博客，顺便学一下markdown语法</h1><h2 id="markdown简介"><a href="#markdown简介" class="headerlink" title="markdown简介"></a>markdown简介</h2><p>Markdown 是一种轻量级标记语言<br>Markdown 编写的文档后缀为 .md</p><!--more--><h2 id="markdown基本语法"><a href="#markdown基本语法" class="headerlink" title="markdown基本语法"></a>markdown基本语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><ul><li>使用#号标记，可以表示1-6级标题， 随#的个数递增，一级标题字号最大，六级标题字号最小。  </li><li>注意在井号和字符之间留一个空格</li></ul><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><ul><li>星号与下划线是相同的效果，单是斜体，双是粗体，三是粗斜体</li><li>斜体： <em>这是斜体</em> <em>这是斜体</em></li><li>粗体： <strong>这是粗体</strong>  <strong>这是粗体</strong></li><li>粗斜体： <em><strong>这是粗斜体</strong></em> <em><strong>这是粗斜体</strong></em></li></ul><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>markdown的换行有很多方式</p><ul><li>直接在一句话后加两个空格</li><li>两句话之间加一个空行</li><li>markdown支持内嵌html标签，可以通过<code>&lt;br/&gt;</code>来实现换行操作(转义字符&#96;，位于数字1的左边)</li></ul><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>markdown中的引用通过符号<code>&gt;</code>实现<br>在引用的区块内，允许换行存在，换行并不会终止引用的区块。如果要结束引用，需要一行空白行，来结束引用的区块。</p><blockquote><p>这是一个引用</p><blockquote><p>二级引用</p></blockquote></blockquote><p>退出引用</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>markdown中嵌入链接的方式：<br><code>[链接名称]</code> <code>(链接地址)</code><br>或用<code>&lt;链接地址&gt;</code><br><a href="https://lz2021211161.github.io/">这是刘正的博客</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>markdown中嵌入图片的方式：<br><code>![图片描述，可写可不写，但是中括号要有](图片地址，本地链接或者URL地址。)</code>  </p><img src="/2024/09/26/learnMarkdown/d5763d758ae2569ae50b8c09fcb60077-1727330188634-2.png" class="" title="d5763d758ae2569ae50b8c09fcb60077"><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表分为有序列表和无序列表</p><ul><li><p>无序列表，使用*、+、-，再加一个空格作为列表的标记</p></li><li><p>有序列表，使用数字并加上.号，再加一个空格作为列表的标记</p><ul><li>子序列</li></ul></li></ul><ol><li>有序列表<ol><li>有序列表</li></ol></li><li>有序列表</li></ol><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>Markdown中给出了多种分割线的样式，我们可以使用分割线让文章结构更加的清晰。<br>分割线的使用，可以在一行中用三个-or*来建立一个分割线，但是注意：在分割线的上面空一行！！！<br>分割线：  </p><hr><hr><p>注意：写分割线前，要空一行之后写，否则会导致前一行字体放大。</p><hr><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>删除线的的使用，可以在要添加删除线的文字前后添加两个~<br><del>这是要被删除的文字</del></p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>在单行内引用代码直接使用反引号即可<br>多行引用代码，需要在代码块的前一行和后一行使用三个反引号，同时在前一个反引号后写入代码的语言  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格使用|来分割不同的单元格，使用-来分隔表头和其他行</p><ul><li>:-：将表头及单元格内容左对齐</li><li>-:：将表头及单元格内容右对齐</li><li>:-:：将表头及单元格内容居中  <table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table></li></ul><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>脚注是对文本的备注</p><p>使用 Markdown<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Markdown是一种纯文本标记语言">[1]</span></a></sup>可以效率的书写文档, 直接转换成 HTML<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="HyperText Markup Language 超文本标记语言">[2]</span></a></sup>, 你可以使用 Typora 编辑器进行书写。</p><blockquote><p>注意脚注会被自动搬运到最后面，需要到文档末尾查看，并且脚注后方的链接可以跳转回加注的地方</p></blockquote><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Markdown是一种纯文本标记语言<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>HyperText Markup Language 超文本标记语言<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/26/hello-world/"/>
    <url>/2024/09/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
